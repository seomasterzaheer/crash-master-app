
'use client';

import { useState, useEffect, useCallback } from 'react';
import { GameDisplay } from '@/components/game/GameDisplay';
import { BettingInterface } from '@/components/game/BettingInterface';
import { GameHistory } from '@/components/game/GameHistory';
import type { AdminGameState, GameRound, UserBet } from '@/types';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { MOCK_GAME_HISTORY } from '@/lib/constants'; // Using mock game history for now

// Simulate game state updates (would come from Firebase in a real app)
const initialGameState: AdminGameState = {
  currentMultiplier: 1.0,
  phase: 'betting', // betting, playing, crashed
};

export default function GamePage() {
  const { user, loading: authLoading } = useAuth(); // Assuming useAuth provides walletBalance
  const { toast } = useToast();
  const [gameState, setGameState] = useState<AdminGameState>(initialGameState);
  const [gameHistory, setGameHistory] = useState<Pick<GameRound, 'id' | 'crashMultiplier'>[]>(MOCK_GAME_HISTORY);
  const [currentUserBet, setCurrentUserBet] = useState<UserBet | null>(null);
  const [balance, setBalance] = useState(user?.walletBalance || 0);

  useEffect(() => {
    if (user) {
      setBalance(user.walletBalance);
    }
  }, [user]);

  const resetGame = useCallback(() => {
    setGameState(prev => ({
      ...initialGameState,
      lastCrashMultiplier: prev.phase === 'crashed' ? prev.currentMultiplier : undefined,
    }));
    setCurrentUserBet(null);
  }, []);

  // Simulate game loop
  useEffect(() => {
    let intervalId: NodeJS.Timeout;

    if (gameState.phase === 'betting') {
      // Betting phase: 5 seconds
      intervalId = setTimeout(() => {
        setGameState(prev => ({ ...prev, phase: 'playing', currentMultiplier: 1.00 }));
      }, 5000);
    } else if (gameState.phase === 'playing') {
      // Playing phase: multiplier increases
      intervalId = setInterval(() => {
        setGameState(prev => {
          // Simulate random crash chance or admin intervention
          // For now, just increase multiplier. Admin crash is handled separately.
          // Simple exponential-like increase.
          const increment = prev.currentMultiplier * 0.01 + 0.01;
          const newMultiplier = parseFloat((prev.currentMultiplier + increment).toFixed(2));
          
          // Random auto-crash for demo purposes if admin doesn't crash
          if (Math.random() < 0.005 && newMultiplier > 1.5) { // Low chance to auto-crash
             console.log(`Auto-crashing at ${newMultiplier}x`);
             return { ...prev, phase: 'crashed', currentMultiplier: newMultiplier };
          }
          return { ...prev, currentMultiplier: newMultiplier };
        });
      }, 100); // Update multiplier every 100ms
    } else if (gameState.phase === 'crashed') {
      // Crashed phase: show result for 3 seconds, then reset
      setGameHistory(prevHistory => [
        { id: Date.now().toString(), crashMultiplier: gameState.currentMultiplier },
        ...prevHistory
      ].slice(0, 20)); // Keep last 20 results
      
      if (currentUserBet && currentUserBet.cashOutMultiplier === null) {
        toast({
          title: "Round Over",
          description: `You lost your bet of PKR ${currentUserBet.betAmount}. The game crashed at ${gameState.currentMultiplier.toFixed(2)}x.`,
          variant: "destructive"
        });
      }

      intervalId = setTimeout(resetGame, 3000);
    }

    return () => clearInterval(intervalId);
  }, [gameState.phase, resetGame, currentUserBet, toast]);


  const handleBet = (amount: number) => {
    if (!user) return;
    // Deduct bet amount from balance (client-side for now)
    setBalance(prev => prev - amount);
    // In a real app, update user's balance in Firestore.
    // For now, useAuth().user.walletBalance would need to be updated or re-fetched.
    // This is a simplified simulation.
    
    setCurrentUserBet({
      id: `bet-${Date.now()}`,
      roundId: `round-${Date.now()}`, // Placeholder
      userId: user.uid,
      betAmount: amount,
      cashOutMultiplier: null,
      outcome: 'pending',
      timestamp: Date.now(),
    });
    // toast({ title: 'Bet Placed', description: `PKR ${amount} on the line!` });
  };

  const handleCashOut = () => {
    if (!user || !currentUserBet) return;
    
    const winnings = currentUserBet.betAmount * gameState.currentMultiplier;
    // Add winnings to balance (client-side for now)
    setBalance(prev => prev + winnings);
    // toast({ title: 'Cashed Out!', description: `You won PKR ${winnings.toFixed(2)}!` });

    setCurrentUserBet(prev => prev ? {...prev, cashOutMultiplier: gameState.currentMultiplier, outcome: 'won'} : null);
    // Note: BettingInterface will also show a toast. This can be consolidated.
  };

  // This function would be triggered by an admin action (e.g., from /admin page via Firebase)
  // For demo purposes, I'm adding a way to simulate admin crash here.
  // In a real app, this would be a Firebase listener.
  const adminTriggerCrash = () => {
    if (gameState.phase === 'playing') {
      setGameState(prev => ({ ...prev, phase: 'crashed' }));
      toast({ title: 'Admin Intervention', description: `Game crashed by admin at ${gameState.currentMultiplier.toFixed(2)}x`});
    }
  };
  
  // Expose adminTriggerCrash to window for testing from console, if needed
  useEffect(() => {
    if (typeof window !== 'undefined') {
      (window as any).adminTriggerCrash = adminTriggerCrash;
    }
  }, [adminTriggerCrash]);


  if (authLoading) {
    return <div className="flex justify-center items-center h-screen"><p>Loading user data...</p></div>;
  }
  
  if (!user) {
    // This should be handled by the (app) layout, but as a fallback:
    return <div className="flex justify-center items-center h-screen"><p>Please log in to play.</p></div>;
  }


  return (
    <div className="flex flex-col items-center gap-8">
      <div className="w-full max-w-3xl">
        <GameDisplay multiplier={gameState.currentMultiplier} gamePhase={gameState.phase} />
        <GameHistory history={gameHistory} />
      </div>
      <div className="w-full max-w-md">
        <BettingInterface
          gamePhase={gameState.phase}
          currentMultiplier={gameState.currentMultiplier}
          onBet={handleBet}
          onCashOut={handleCashOut}
          balance={balance} // Pass the local balance state
        />
      </div>
    </div>
  );
}
